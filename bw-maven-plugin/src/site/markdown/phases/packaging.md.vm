#*
 * (C) Copyright 2011-2015 FastConnect SAS
 * (http://www.fastconnect.fr/) and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')

$h2 Packaging

---

For a [TIBCO BusinessWorks project](../bwmaven-lifecycles.html#EAR), the packaging is
the step that comes right after compilation of the EAR and unit	tests.
	
In fact, deploying a TIBCO BusinessWorks EAR implies to
[create a Deployment Descriptor XML file](../extract-xml-from-ear-mojo.html).
	
Moreover, the packaging step will provide an exclusive syntax to simplify the
configuration of TIBCO BusinessWorks applications. To achieve this, the	previous
XML file will be [converted to properties files](../generate-properties-from-xml-mojo.html) that
will be easier to edit.

The scope of this page is to describe the <b>files generated by the packaging
phase for one TIBCO BusinessWorks project</b> and explain their use in the next
phase: deployment.
	
The generation of a full compressed package with the maven-assembly-plugin is
out of the scope.

---

$h3 XML-based configuration

The Deployment Descriptor in TIBCO (not necessarly BusinessWorks) is an XML file
with a root element called <i>&lt;application></i> based on a schema with
<i><tt>http&#58;//www.tibco.com/xmlns/ApplicationManagement</tt></i> namespace.
	
```xml
<?xml version="1.0" encoding="UTF-8"?>

<application xmlns="http://www.tibco.com/xmlns/ApplicationManagement"
             name="MyBWProject">
    ...
    <NVPairs name="Global Variables">
        <NameValuePair>
            <name>Connection/JMS/Port</name>
            <value>7222</value>
        </NameValuePair>
    </NVPairs>
    ...
    <services>
        <bw name="MyBWProject.par">
            <enabled>true</enabled>
            <bindings>
                <binding name="MyBWProject-1">
                    <machine>10.8.0.1</machine>
                    ...
                </binding>
            </bindings>
            <NVPairs name="Runtime Variables">
                <NameValuePair>
                    <name>Connection/JMS/Port</name>
                    <value>7223</value>
                </NameValuePair>
            </NVPairs>
            ...
            <bwprocesses>
                <bwprocess name="JMSInput.process">
                    <starter>JMS Queue Receiver</starter>
                    <enabled>true</enabled>
                    <maxJob>0</maxJob>
                    <activation>true</activation>
                    <flowLimit>0</flowLimit>
                </bwprocess>
                ...
            </bwprocesses>
            <isFt>false</isFt>
        </bw>
    </services>
</application>
```

$h3 Properties-based configuration

In the world of exploitation teams, the standard mechanism to configure a system
is to edit (most likely in vi editor) plain text files with <tt>key=value</tt>
properties. These files are called properties-based	configuration files.
	
However the TIBCO Deployment Descriptor is XML-based. That's why this plugin
will [convert](../generate-properties-from-xml-mojo.html) the 
[XML Deployment Descriptor file](./packaging.html#XML-based_configuration) 
[extracted from the TIBCO BusinessWorks EAR](../extract-xml-from-ear-mojo.html)
file to properties-based files:

* <b>&lt;application>.gv.properties</b>: to modify the Global Variables

Each <tt>key=value</tt> line of a <i>".gv.properties"</i> file is the
representation of a	<b>&lt;NameValuePair></b> element with a subelement <b>&lt;name></b>
corresponding to the <tt>key</tt> and a subelement <b>&lt;value></b>
corresponding to the <tt>value</tt>. For instance:
	
```
Connection/JMS/Port=7222
```

* <b>&lt;application>.services.properties</b>: to create the service-level
configuration such as <tt>bindings</tt>, <tt>processes</tt>...

Each line of a <i>".services.properties"</i> file is composed of a <tt>key</tt>
which has a XPath-like syntax to define element in the TIBCO Deployment
Descriptor, relatively to te <i>&lt;services></i> element.
	
This syntax will basically be:

```xml
<element-name>[@name]/<sub-element-name>/<sub-sub-element-name>=<value>
```

For instance:

```
bw[MyBWProject.par]/bindings/binding[MyBWProject-1]/machine=10.8.0.1


bw[MyBWProject.par]/bindings/variables/variable[Connection/JMS/Port]=7223


bw[MyBWProject.par]/bwprocesses/bwprocess[JMSInput.process]/starter=JMS Queue Receiver
bw[MyBWProject.par]/bwprocesses/bwprocess[JMSInput.process]/enabled=true
bw[MyBWProject.par]/bwprocesses/bwprocess[JMSInput.process]/maxJob=0
bw[MyBWProject.par]/bwprocesses/bwprocess[JMSInput.process]/activation=true
bw[MyBWProject.par]/bwprocesses/bwprocess[JMSInput.process]/flowLimit=0
```

If an element with the name between bracket doesn't exist, it will be
created on-the-fly. Thus, it is possible to create new bindings dynamically in
the properties-based files. This custom configuration will be
[put back into the TIBCO Deployment Descriptor](../generate-xml-from-properties-mojo.html).

---

$h3 Configuration management lifecycle

Now that we have described all the files generated during the packaging phase 
for one TIBCO BusinessWorks application, we will see how these files interact 
before the package is ready to be deployed.

---

$h4 Package

The configuration management lifecycle has to address a main issue:
synchronize actions of development team and operations team
(see [DevOps wikipedia article](http://en.wikipedia.org/wiki/DevOps) for
details).
	
This plugin defines a comprehensive strategy aimed at clearly separating
concerns between build time and deployment time:
	
* <b>packaging</b> phase for development team
* <b>deployment</b> phase for operations team

$h4 Deployment

Once the packaging step we have three files that will be used by
deployment step :
	
* <b>&lt;aplication>.ear</b>: the EAR
* <b>&lt;aplication>-final.xml</b>: the XML Deployment Descriptor with additional
configuration set during <b>packaging</b> phase
* <b>pom.xml</b>: a special Maven POM file dedicated to the deployment
on a TIBCO domain (with
['bw-ear-deploy' packaging](../bwmaven-lifecycles.html#Deployment))
	
There are also three more files for reference purpose only:

* <b>&lt;aplication>.xml</b>: the XML Deployment Descriptor extracted from the EAR
* <b>&lt;aplication>.gv.properties</b>: the properties files for Global Variables
* <b>&lt;aplication>.services.properties</b>: the properties files for services

---

<h6/>

![The configuration lifecycle for packaging](../images/configuration-lifecycle-packaging.png)

<h6/> 

![The configuration lifecycle for deployment](../images/configuration-lifecycle-deployment.png)

---

<h6/>

* At first, the EAR is generated by previous step "compile". from this EAR a
standard Deployment Descriptor XML file is extracted.
This file is the one with default configuration set in TIBCO Designer by
developers (see [extract-xml-from-ear](../extract-xml-from-ear-mojo.html) goal).
* Then, this XML file is converted to the properties-based syntax described
[above](#Properties-based_configuration)
(see
[generate-properties-from-xml](../generate-properties-from-xml-mojo.html)
goal).	
* Optionally, these properties can be overridden by properties of the
"reference" files. These files can be used by developers to put configuration
that doesn't depend on target environment (machines hostnames, DB credentials,
JMS credentials...). Usually the "reference" files are stored with the sources
on the SCM
(see [generate-properties-from-xml](../generate-properties-from-xml-mojo.html)
goal).
* The last step is to convert properties-based files back to the XML Deployment
Descriptor
(see
[generate-xml-from-properties](../generate-xml-from-properties-mojo.html)
goal).

<h6/>

The important point to notice is that properties files can be edited before
deploying the application. This last configuration edition will be included
in the XML before deploying the EAR to TIBCO Domain.
	
This will be further explained in the [Deployment phase](./deployment.html).